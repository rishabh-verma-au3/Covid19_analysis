   
   <div class="container c1 ">
       <div class="row ">
           <div class="col-12 first">
               <p>Welcome to the Covid-19 Analysis</p>
           </div>
       </div>
   </div>



   <div class="container">
         <div class="row">
             <div class="col-12 second">
                       <p>1. Below Bar Graph shows  Countries vs deaths_per_1m_population</p>    
             </div>
             <div class="col-12 death ">
                      <svg width="1200" height="600"></svg>
             </div>
              <div class="col-12 second">
                       <p>2. Below Bar Graph shows  Countries vs tests_per_1m_population</p>    
             </div>
             <div class="col-12 testc ">
                      <svg width="1200" height="600"></svg>
             </div>
             <div class="col-12 second">
                       <p>3. Below Bar Graph shows  Countries vs total_cases_per_1m_population</p>    
             </div>
             <div class="col-12 total ">
                      <svg width="1200" height="600"></svg>
             </div>

         </div>
   </div>


     <div id="table_wrap" style="width=100%; margin-right:5px;">
        <h3>Below showing the tabular form of given COVID19 data</h3>
        <table style="width:100%,min-width:400px" margin-right="3px" id="med_inc"></table>
        
    </div>

    <div >
        <p class="last">--Rishabh Verma</p>
         <p class="last">Thank you</p>
    </div>





<script>
    $(document).ready(function(){
         
               function get_deaths_per_million(data){
                         var svg = d3.select(".death").select("svg"),
                         margin = 200,
                         width = svg.attr("width") - margin,
                         height = svg.attr("height") - margin
                         svg.append("text")
                         .attr("transform", "translate(300,0)")
                         .attr("x", 50)
                         .attr("y", 50)
                         .attr("font-size", "24px")
                         .text("countries-vs-deaths_per_1m_population")
                         var xScale = d3.scaleBand().range([0, width]).padding(0.3),
                         yScale = d3.scaleLinear().range([height, 0]);
                         var g = svg.append("g")
                         .attr("transform", "translate(" + 100 + "," + 100 + ")");
                         xScale.domain(data.map(function(d) { return d.country_name; }));
                         yScale.domain([0, d3.max(data, function(d) { return parseInt(d.deaths_per_1m_population.replace(/,/g,'')); })]);
                         g.append("g")
                         .attr("transform", "translate(0," + height + ")")
                         .call(d3.axisBottom(xScale).tickFormat((d,i) => ""))
                         .append("text")
                         .attr("y", height - 350)
                         .attr("x", width - 500)
                         .attr("text-anchor", "end")
                         .attr("fill", "blue")
                         .attr("font-size",20)
                         .text("countries");

                         g.append("g")
                         .call(d3.axisLeft(yScale).tickFormat(function(d){
                         return  d;
                         })
                         .ticks(10))
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 40)
                         .attr("dy", "-4em")
                         .attr("text-anchor", "end")
                         .attr("fill", "red")
                         .attr("font-size",20)
                         .text("deaths_per_1m_population");

                         g.selectAll(".bar")
                         .data(data)
                         .enter().append("rect")
                         .attr("class", "bar")
                         .attr("x", function(d) { return xScale(d.country_name); })
                         .attr("y", function(d) { return yScale(parseInt(d.deaths_per_1m_population.replace(/,/g,''))); })
                         .attr("width", xScale.bandwidth())
                         .attr("height", function(d) { return height - yScale(parseInt(d.deaths_per_1m_population.replace(/,/g,''))); });
                }
                

                function get_tests_per_million(data){
                         var svg = d3.select(".testc").select("svg"),
                         margin = 200,
                         width = svg.attr("width") - margin,
                         height = svg.attr("height") - margin
                         svg.append("text")
                         .attr("transform", "translate(300,0)")
                         .attr("x", 50)
                         .attr("y", 50)
                         .attr("font-size", "24px")
                         .text("countries-vs-tests_per_1m_population")
                         var xScale = d3.scaleBand().range([0, width]).padding(0.3),
                         yScale = d3.scaleLinear().range([height, 0]);
                         var g = svg.append("g")
                         .attr("transform", "translate(" + 100 + "," + 100 + ")");
                         xScale.domain(data.map(function(d) { return d.country_name; }));
                         yScale.domain([0, d3.max(data, function(d) { return parseInt(d.tests_per_1m_population.replace(/,/g,'')); })]);
                         g.append("g")
                         .attr("transform", "translate(0," + height + ")")
                         .call(d3.axisBottom(xScale).tickFormat((d,i) => ""))
                         .append("text")
                         .attr("y", height - 350)
                         .attr("x", width - 500)
                         .attr("text-anchor", "end")
                         .attr("fill", "blue")
                         .attr("font-size",20)
                         .text("countries");
                         g.append("g")
                         .call(d3.axisLeft(yScale).tickFormat(function(d){
                         return  d;
                         })
                         .ticks(10))
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 40)
                         .attr("dy", "-5em")
                         .attr("text-anchor", "end")
                         .attr("fill", "red")
                         .attr("font-size",20)
                         .text("tests_per_1m_population");
                         g.selectAll(".bar")
                         .data(data)
                         .enter().append("rect")
                         .attr("class", "bar")
                         .attr("x", function(d) { return xScale(d.country_name); })
                         .attr("y", function(d) { return yScale(parseInt(d.tests_per_1m_population.replace(/,/g,''))); })
                         .attr("width", xScale.bandwidth())
                         .attr("height", function(d) { return height - yScale(parseInt(d.tests_per_1m_population.replace(/,/g,''))); });
                }

                function get_total_cases_per_million(data){
                         var svg = d3.select(".total").select("svg"),
                         margin = 200,
                         width = svg.attr("width") - margin,
                         height = svg.attr("height") - margin
                         svg.append("text")
                         .attr("transform", "translate(300,0)")
                         .attr("x", 50)
                         .attr("y", 50)
                         .attr("font-size", "24px")
                         .text("countries-vs-total_cases_per_1m_population")
                        var xScale = d3.scaleBand().range([0, width]).padding(0.3),
                         yScale = d3.scaleLinear().range([height, 0]);
                         var g = svg.append("g")
                         .attr("transform", "translate(" + 100 + "," + 100 + ")");
                         xScale.domain(data.map(function(d) { return d.country_name; }));
                         yScale.domain([0, d3.max(data, function(d) { return parseInt(d.total_cases_per_1m_population.replace(/,/g,'')); })]);
                         g.append("g")
                         .attr("transform", "translate(0," + height + ")")
                         .call(d3.axisBottom(xScale).tickFormat((d,i) => ""))
                         .append("text")
                         .attr("y", height - 350)
                         .attr("x", width - 500)
                         .attr("text-anchor", "end")
                         .attr("fill", "blue")
                         .attr("font-size",20)
                         .text("countries");
                         g.append("g")
                         .call(d3.axisLeft(yScale).tickFormat(function(d){
                         return  d;
                         })
                         .ticks(10))
                         .append("text")
                         .attr("transform", "rotate(-90)")
                         .attr("y", 40)
                         .attr("dy", "-5em")
                         .attr("text-anchor", "end")
                         .attr("fill", "red")
                         .attr("font-size",20)
                         .text("tests_per_1m_population");
                          g.selectAll(".bar")
                         .data(data)
                         .enter().append("rect")
                         .attr("class", "bar")
                         .attr("x", function(d) { return xScale(d.country_name); })
                         .attr("y", function(d) { return yScale(parseInt(d.total_cases_per_1m_population.replace(/,/g,''))); })
                         .attr("width", xScale.bandwidth())
                         .attr("height", function(d) { return height - yScale(parseInt(d.total_cases_per_1m_population.replace(/,/g,''))); });
                }


                function tabulate(data, columns) {
                           let len=columns.length;
                           var columnNames=[];
                           for(let i=0;i<len;i++){
                               columnNames[i]=''
                           }

                           var table = d3.select("#med_inc")
                           , thead = table.append("thead")
                           , tbody = table.append("tbody");

                // append the header row
                     thead.append("tr")
                    .selectAll("th")
                    .data(columns)
                    .enter()
                    .append("th")
                    .text(function (columnNames) { return columnNames; });

                // create a row for each object in the data
                     var rows = tbody.selectAll("tr")
                    .data(data)
                    .enter()
                    .append("tr");

                // create a cell in each row for each column
                    var cells = rows.selectAll("td")
                    .data(function (row) {
                        return columns.map(function (column) {
                            return { column: column, value: row[column] };
                        });
                    })
                    .enter()
                    .append("td")
                    .attr("style", "font-family: 'Lato'")
                        .html(function (d) {
                                return d.value;
                            
                        });

                    return table;
                   };



          $.ajax({
             async: true,
             crossDomain: true,
             url: "https://corona-virus-world-and-india-data.p.rapidapi.com/api",
             method: "GET",
             headers: {
             'x-rapidapi-host': "corona-virus-world-and-india-data.p.rapidapi.com",
             'x-rapidapi-key': "e636271222mshfa09fbf3b678f09p1a3847jsnfdd985c1a38a"
              },
             success:function(dat){
                
                
                var data = dat.countries_stat;
                  //console.log(data.active_cases)
                  for(let i=0;i<data.length;i++){
                  data[i].active_cases=data[i].active_cases.replace( /[N][/][A]/g,'0')
                      
                  data[i].total_recovered=data[i].total_recovered.replace( /[N][/][A]/g,'0')

                  }
                  //data = JSON.parse(data.active_cases.replace( /,/g,'0'));
                  get_deaths_per_million(data)
                  get_tests_per_million(data)
                  get_total_cases_per_million(data)
        

                  tabulate(data,['active_cases','cases','country_name','deaths','deaths_per_1m_population','new_cases','new_deaths','serious_critical','tests_per_1m_population','total_cases_per_1m_population','total_recovered','total_tests']) 
  
        

          

                   
             }
                
             
       })




                

       




});
</script>
 

